{"version":"2.1.0","$schema":"https:\/\/json.schemastore.org\/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Psalm","informationUri":"https:\/\/psalm.dev","version":"5.26.1@d747f6500b38ac4f7dfc5edbcae6e4b637d7add0","rules":[{"id":"244","name":"TaintedSql","shortDescription":{"text":"TaintedSql"},"properties":{"tags":["security"]},"helpUri":"https:\/\/psalm.dev\/244","help":{"markdown":"# TaintedSql\n\nEmitted when user-controlled input can be passed into to a SQL command.\n\n```php\n<?php\n\nclass A {\n    public function deleteUser(PDO $pdo) : void {\n        $userId = self::getUserId();\n        $pdo->exec(\"delete from users where user_id = \" . $userId);\n    }\n\n    public static function getUserId() : string {\n        return (string) $_GET[\"user_id\"];\n    }\n}\n```\n","text":"# TaintedSql\n\nEmitted when user-controlled input can be passed into to a SQL command.\n\n```php\n<?php\n\nclass A {\n    public function deleteUser(PDO $pdo) : void {\n        $userId = self::getUserId();\n        $pdo->exec(\"delete from users where user_id = \" . $userId);\n    }\n\n    public static function getUserId() : string {\n        return (string) $_GET[\"user_id\"];\n    }\n}\n```\n"}},{"id":"257","name":"TaintedCookie","shortDescription":{"text":"TaintedCookie"},"properties":{"tags":["security"]},"helpUri":"https:\/\/psalm.dev\/257","help":{"markdown":"# TaintedCookie\n\nPotential cookie injection. This rule is emitted when user-controlled input can be passed into a cookie.\n\n## Risk\n\nThe risk of setting arbitrary cookies depends on further application configuration. \n\nExamples of potential issues:\n\n- Session Fixation: If the authentication cookie doesn't change after a successful login an attacker could fixate the session cookie. If a victim logs in with a fixated cookie, the attacker can now take over the session of the user.\n- Cross-Site-Scripting (XSS): Some application code could read cookies and print it out unsanitized to the user.\n\n\n\n## Example\n\n```php\n<?php\n\nsetcookie('authtoken', $_GET['value'], time() + (86400 * 30), '\/');\n```\n\n## Mitigations\n\nIf this is required functionality, limit the cookie setting to values and not the name. (e.g. `authtoken` in the example)\n\nMake sure to change session tokens after authentication attempts.\n\n## Further resources\n\n- [OWASP Wiki for Session fixation](https:\/\/owasp.org\/www-community\/attacks\/Session_fixation)\n- [Session Management Cheatsheet](https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Session_Management_Cheat_Sheet.html)\n- [CWE-384](https:\/\/cwe.mitre.org\/data\/definitions\/384.html)\n","text":"# TaintedCookie\n\nPotential cookie injection. This rule is emitted when user-controlled input can be passed into a cookie.\n\n## Risk\n\nThe risk of setting arbitrary cookies depends on further application configuration. \n\nExamples of potential issues:\n\n- Session Fixation: If the authentication cookie doesn't change after a successful login an attacker could fixate the session cookie. If a victim logs in with a fixated cookie, the attacker can now take over the session of the user.\n- Cross-Site-Scripting (XSS): Some application code could read cookies and print it out unsanitized to the user.\n\n\n\n## Example\n\n```php\n<?php\n\nsetcookie('authtoken', $_GET['value'], time() + (86400 * 30), '\/');\n```\n\n## Mitigations\n\nIf this is required functionality, limit the cookie setting to values and not the name. (e.g. `authtoken` in the example)\n\nMake sure to change session tokens after authentication attempts.\n\n## Further resources\n\n- [OWASP Wiki for Session fixation](https:\/\/owasp.org\/www-community\/attacks\/Session_fixation)\n- [Session Management Cheatsheet](https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Session_Management_Cheat_Sheet.html)\n- [CWE-384](https:\/\/cwe.mitre.org\/data\/definitions\/384.html)\n"}},{"id":"255","name":"TaintedFile","shortDescription":{"text":"TaintedFile"},"properties":{"tags":["security"]},"helpUri":"https:\/\/psalm.dev\/255","help":{"markdown":"# TaintedFile\n\nThis rule is emitted when user-controlled input can be passed into a sensitive file operation.\n\n## Risk\n\nThe risk here depends on the actual operation that contains user-controlled input, and how it is later on processed.\n\nIt could range from:\n\n- Creating files\n    - Example: `file_put_contents`\n    - Risk: Depending on the server configuration this may result in remote code execution. (e.g. writing a file in the web root)\n- Modifying files\n    - Example: `file_put_contents`\n    - Risk: Depending on the server configuration this may result in remote code execution. (e.g. modifying a PHP file)\n- Reading files\n    - Example: `file_get_contents`\n    - Risk: Sensitive data could be exposed from the filesystem. (e.g. config values, source code, user-submitted files)\n- Deleting files\n    - Example: `unlink`\n    - Risk: Denial of Service or potentially RCE. (e.g. deleting application code, removing a .htaccess file)\n\n## Example\n\n```php\n<?php\n\n$content = file_get_contents($_GET['header']);\necho $content;\n```\n\n## Mitigations\n\nUse an allowlist approach where possible to verify names on file operations.\n\nSanitize user-controlled filenames by stripping `..`, `\\` and `\/`.\n\n## Further resources\n\n- [File Upload Cheat Sheet](https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/File_Upload_Cheat_Sheet.html)\n- [OWASP Wiki for Unrestricted FIle Upload](https:\/\/owasp.org\/www-community\/vulnerabilities\/Unrestricted_File_Upload)\n- [CWE-73](https:\/\/cwe.mitre.org\/data\/definitions\/73.html)\n","text":"# TaintedFile\n\nThis rule is emitted when user-controlled input can be passed into a sensitive file operation.\n\n## Risk\n\nThe risk here depends on the actual operation that contains user-controlled input, and how it is later on processed.\n\nIt could range from:\n\n- Creating files\n    - Example: `file_put_contents`\n    - Risk: Depending on the server configuration this may result in remote code execution. (e.g. writing a file in the web root)\n- Modifying files\n    - Example: `file_put_contents`\n    - Risk: Depending on the server configuration this may result in remote code execution. (e.g. modifying a PHP file)\n- Reading files\n    - Example: `file_get_contents`\n    - Risk: Sensitive data could be exposed from the filesystem. (e.g. config values, source code, user-submitted files)\n- Deleting files\n    - Example: `unlink`\n    - Risk: Denial of Service or potentially RCE. (e.g. deleting application code, removing a .htaccess file)\n\n## Example\n\n```php\n<?php\n\n$content = file_get_contents($_GET['header']);\necho $content;\n```\n\n## Mitigations\n\nUse an allowlist approach where possible to verify names on file operations.\n\nSanitize user-controlled filenames by stripping `..`, `\\` and `\/`.\n\n## Further resources\n\n- [File Upload Cheat Sheet](https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/File_Upload_Cheat_Sheet.html)\n- [OWASP Wiki for Unrestricted FIle Upload](https:\/\/owasp.org\/www-community\/vulnerabilities\/Unrestricted_File_Upload)\n- [CWE-73](https:\/\/cwe.mitre.org\/data\/definitions\/73.html)\n"}},{"id":"245","name":"TaintedHtml","shortDescription":{"text":"TaintedHtml"},"properties":{"tags":["security"]},"helpUri":"https:\/\/psalm.dev\/245","help":{"markdown":"# TaintedHtml\n\nEmitted when user-controlled input that can contain HTML can be passed into to an `echo` statement.\n\n## Risk\n\nThis could lead to a potential Cross Site Scripting (XSS) vulnerability. Using a XSS vulnerability, an attacker could inject malicious JavaScript and execute any action JavaScript could do. Examples include:\n\n- Stealing authentication material (e.g. cookies, JWT tokens)\n- Exfiltrate sensitive information by reading the DOM\n- Keylog entries on the website (e.g. fake login form)\n\nWhether this is exploitable or not depends on a few conditions:\n\n- Is an executable mimetype set? (e.g. `text\/html`)\n- Is the content served inline or as attachment? (`Content-Disposition`)\n- Is the output properly sanitized? (e.g. stripping all HTML tags or having an allowlist of allowed characters)\n\n## Example\n\n```php\n<?php\n\n$name = $_GET[\"name\"];\n\nprintName($name);\n\nfunction printName(string $name) {\n    echo $name;\n}\n```\n\n## Mitigations\n\n- Sanitize user-input by using functions such as `htmlentities` or use an allowlist.\n- Set all cookies to `HTTPOnly`.\n- Consider using Content Security Policy (CSP), to limit the risk of XSS vulnerabilities.\n- If user input itself is HTML, see [Sanitizing HTML User Input](..\/..\/security_analysis\/avoiding_false_positives.md#sanitizing-html-user-input)\n\n## Further resources\n\n- [OWASP Wiki for Cross Site Scripting (XSS)](https:\/\/owasp.org\/www-community\/attacks\/xss\/)\n- [Content-Security-Policy - Web Fundamentals](https:\/\/developers.google.com\/web\/fundamentals\/security\/csp)\n","text":"# TaintedHtml\n\nEmitted when user-controlled input that can contain HTML can be passed into to an `echo` statement.\n\n## Risk\n\nThis could lead to a potential Cross Site Scripting (XSS) vulnerability. Using a XSS vulnerability, an attacker could inject malicious JavaScript and execute any action JavaScript could do. Examples include:\n\n- Stealing authentication material (e.g. cookies, JWT tokens)\n- Exfiltrate sensitive information by reading the DOM\n- Keylog entries on the website (e.g. fake login form)\n\nWhether this is exploitable or not depends on a few conditions:\n\n- Is an executable mimetype set? (e.g. `text\/html`)\n- Is the content served inline or as attachment? (`Content-Disposition`)\n- Is the output properly sanitized? (e.g. stripping all HTML tags or having an allowlist of allowed characters)\n\n## Example\n\n```php\n<?php\n\n$name = $_GET[\"name\"];\n\nprintName($name);\n\nfunction printName(string $name) {\n    echo $name;\n}\n```\n\n## Mitigations\n\n- Sanitize user-input by using functions such as `htmlentities` or use an allowlist.\n- Set all cookies to `HTTPOnly`.\n- Consider using Content Security Policy (CSP), to limit the risk of XSS vulnerabilities.\n- If user input itself is HTML, see [Sanitizing HTML User Input](..\/..\/security_analysis\/avoiding_false_positives.md#sanitizing-html-user-input)\n\n## Further resources\n\n- [OWASP Wiki for Cross Site Scripting (XSS)](https:\/\/owasp.org\/www-community\/attacks\/xss\/)\n- [Content-Security-Policy - Web Fundamentals](https:\/\/developers.google.com\/web\/fundamentals\/security\/csp)\n"}},{"id":"274","name":"TaintedTextWithQuotes","shortDescription":{"text":"TaintedTextWithQuotes"},"properties":{"tags":["security"]},"helpUri":"https:\/\/psalm.dev\/274","help":{"markdown":"# TaintedTextWithQuotes\n\nEmitted when user-controlled input that can contain quotation marks can be passed into to an `echo` statement.\n\n## Risk\n\nThis could lead to a potential Cross Site Scripting (XSS) vulnerability. Using a XSS vulnerability, an attacker could inject malicious JavaScript and execute any action JavaScript could do. Examples include:\n\n- Stealing authentication material (e.g. cookies, JWT tokens)\n- Exfiltrate sensitive information by reading the DOM\n- Keylog entries on the website (e.g. fake login form)\n\nWhether this is exploitable or not depends on a few conditions:\n\n- Is an executable mimetype set? (e.g. `text\/html`)\n- Is the content served inline or as attachment? (`Content-Disposition`)\n- Is the output properly sanitized? (e.g. stripping all HTML tags or having an allowlist of allowed characters)\n\n## Example\n\n```php\n<?php\n$param = strip_tags($_GET['param']);\n?>\n\n<script>\n    console.log('<?=$param?>')\n<\/script>\n```\n\nPassing `');alert('injection');\/\/` as a `GET` param here would cause the `alert` to trigger.\n\n## Mitigations\n\n- Sanitize user input by using functions such as `htmlentities` with the `ENT_QUOTES` flag or use an allowlist.\n- Set all cookies to `HTTPOnly`.\n- Consider using Content Security Policy (CSP), to limit the risk of XSS vulnerabilities.\n- If user input itself is HTML, see [Sanitizing HTML User Input](..\/..\/security_analysis\/avoiding_false_positives.md#sanitizing-html-user-input)\n\n## Further resources\n\n- [OWASP Wiki for Cross Site Scripting (XSS)](https:\/\/owasp.org\/www-community\/attacks\/xss\/)\n- [Content-Security-Policy - Web Fundamentals](https:\/\/developers.google.com\/web\/fundamentals\/security\/csp)\n","text":"# TaintedTextWithQuotes\n\nEmitted when user-controlled input that can contain quotation marks can be passed into to an `echo` statement.\n\n## Risk\n\nThis could lead to a potential Cross Site Scripting (XSS) vulnerability. Using a XSS vulnerability, an attacker could inject malicious JavaScript and execute any action JavaScript could do. Examples include:\n\n- Stealing authentication material (e.g. cookies, JWT tokens)\n- Exfiltrate sensitive information by reading the DOM\n- Keylog entries on the website (e.g. fake login form)\n\nWhether this is exploitable or not depends on a few conditions:\n\n- Is an executable mimetype set? (e.g. `text\/html`)\n- Is the content served inline or as attachment? (`Content-Disposition`)\n- Is the output properly sanitized? (e.g. stripping all HTML tags or having an allowlist of allowed characters)\n\n## Example\n\n```php\n<?php\n$param = strip_tags($_GET['param']);\n?>\n\n<script>\n    console.log('<?=$param?>')\n<\/script>\n```\n\nPassing `');alert('injection');\/\/` as a `GET` param here would cause the `alert` to trigger.\n\n## Mitigations\n\n- Sanitize user input by using functions such as `htmlentities` with the `ENT_QUOTES` flag or use an allowlist.\n- Set all cookies to `HTTPOnly`.\n- Consider using Content Security Policy (CSP), to limit the risk of XSS vulnerabilities.\n- If user input itself is HTML, see [Sanitizing HTML User Input](..\/..\/security_analysis\/avoiding_false_positives.md#sanitizing-html-user-input)\n\n## Further resources\n\n- [OWASP Wiki for Cross Site Scripting (XSS)](https:\/\/owasp.org\/www-community\/attacks\/xss\/)\n- [Content-Security-Policy - Web Fundamentals](https:\/\/developers.google.com\/web\/fundamentals\/security\/csp)\n"}}]}},"results":[{"ruleId":"244","message":{"text":"Detected tainted SQL"},"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":36,"endLine":36,"startColumn":26,"endColumn":32}}}],"codeFlows":[{"message":{"text":"Tracing the path from user input to insecure usage"},"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":60,"endLine":60,"startColumn":11,"endColumn":16}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":60,"endLine":60,"startColumn":1,"endColumn":8}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":63,"endLine":63,"startColumn":20,"endColumn":27}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":34,"endLine":34,"startColumn":41,"endColumn":48}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":34,"endLine":34,"startColumn":41,"endColumn":48}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":35,"endLine":35,"startColumn":47,"endColumn":54}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":35,"endLine":35,"startColumn":5,"endColumn":11}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":36,"endLine":36,"startColumn":26,"endColumn":32}}}}]}]}]},{"ruleId":"257","message":{"text":"Detected tainted cookie"},"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":42,"endLine":42,"startColumn":23,"endColumn":32}}}],"codeFlows":[{"message":{"text":"Tracing the path from user input to insecure usage"},"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":61,"endLine":61,"startColumn":13,"endColumn":18}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":61,"endLine":61,"startColumn":1,"endColumn":10}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":64,"endLine":64,"startColumn":15,"endColumn":24}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":41,"endLine":41,"startColumn":24,"endColumn":33}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":41,"endLine":41,"startColumn":24,"endColumn":33}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":42,"endLine":42,"startColumn":23,"endColumn":32}}}}]}]}]},{"ruleId":"255","message":{"text":"Detected tainted file handling"},"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":56,"endLine":56,"startColumn":23,"endColumn":32}}}],"codeFlows":[{"message":{"text":"Tracing the path from user input to insecure usage"},"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":60,"endLine":60,"startColumn":11,"endColumn":16}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":60,"endLine":60,"startColumn":1,"endColumn":8}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":66,"endLine":66,"startColumn":21,"endColumn":28}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":54,"endLine":54,"startColumn":30,"endColumn":37}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":54,"endLine":54,"startColumn":30,"endColumn":37}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":55,"endLine":55,"startColumn":37,"endColumn":44}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":55,"endLine":55,"startColumn":5,"endColumn":14}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":56,"endLine":56,"startColumn":23,"endColumn":32}}}}]}]}]},{"ruleId":"245","message":{"text":"Detected tainted HTML"},"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":65,"endLine":65,"startColumn":6,"endColumn":33}}}],"codeFlows":[{"message":{"text":"Tracing the path from user input to insecure usage"},"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":23,"endLine":23,"startColumn":21,"endColumn":26}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":49,"endLine":49,"startColumn":5,"endColumn":10}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":46,"endLine":46,"startColumn":10,"endColumn":21}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":65,"endLine":65,"startColumn":6,"endColumn":33}}}}]}]}]},{"ruleId":"274","message":{"text":"Detected tainted text with possible quotes"},"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":65,"endLine":65,"startColumn":6,"endColumn":33}}}],"codeFlows":[{"message":{"text":"Tracing the path from user input to insecure usage"},"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":23,"endLine":23,"startColumn":21,"endColumn":26}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":49,"endLine":49,"startColumn":5,"endColumn":10}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":46,"endLine":46,"startColumn":10,"endColumn":21}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":65,"endLine":65,"startColumn":6,"endColumn":33}}}}]}]}]},{"ruleId":"245","message":{"text":"Detected tainted HTML"},"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":71,"endLine":71,"startColumn":9,"endColumn":25}}}],"codeFlows":[{"message":{"text":"Tracing the path from user input to insecure usage"},"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":71,"endLine":71,"startColumn":9,"endColumn":17}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":71,"endLine":71,"startColumn":9,"endColumn":25}}}}]}]}]},{"ruleId":"274","message":{"text":"Detected tainted text with possible quotes"},"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":71,"endLine":71,"startColumn":9,"endColumn":25}}}],"codeFlows":[{"message":{"text":"Tracing the path from user input to insecure usage"},"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":71,"endLine":71,"startColumn":9,"endColumn":17}}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"src\/index.php"},"region":{"startLine":71,"endLine":71,"startColumn":9,"endColumn":25}}}}]}]}]}]}]}
